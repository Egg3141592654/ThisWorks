// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveWheelieBar.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

MoveWheelieBar::MoveWheelieBar(bool p_previousState, bool p_pushedButton, bool isAuto): Command() {
    previousState = p_previousState;
    pushedButton = p_pushedButton;
    this->isAuto = isAuto;

        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::wheelieBar.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void MoveWheelieBar::Initialize()
{
	// Start closed position
	Robot::wheelieBar->Down();
	previousState = true;
}

// Called repeatedly when this Command is scheduled to run
void MoveWheelieBar::Execute() {

	if (isAuto)
	{
		// This is our signal to run in auto mode
		if (pushedButton)
		{
			Robot::wheelieBar->Up();
		}
		else
		{
			Robot::wheelieBar->Down();
		}
	}
	else
	{
		bool pressing = Robot::oi->getOperatorJoystick()->GetRawButton(3);
		if(!pushedButton && pressing)
		{
			if (!previousState)
			{
				Robot::wheelieBar->Up();
				previousState = true;
			}
			else
			{
				Robot::wheelieBar->Down();
				previousState = false;
			}

			pushedButton = true;
		}
		else if(pushedButton && !pressing)
		{
			pushedButton = false;
		}
		else
		{
			// DO NOTHING
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool MoveWheelieBar::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void MoveWheelieBar::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveWheelieBar::Interrupted() {

}
