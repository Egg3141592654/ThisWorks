// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef MOVEARM_H
#define MOVEARM_H


#include "Commands/PIDSubsystem.h"
#include "../Robot.h"

/**
 * This is the command that will move the arm around, both by manual modes and with PID.
 */
class MoveArm: public Command {
public:
    /*
     * Initializes a new instance of the MoveArm class. This constructor should only be used in the Arm
     * subsystem, as this will automatically initialize the arm to 0 position.
     */
	MoveArm();

	/*
	 * Initializes a new instance of the MoveArm class. This constructor is used in autonomous and injects
	 * an initial condition into the move arm class.
	 *
	 * @param position: This is the initial position to move the arm to.
	 */
	MoveArm(double);

	/*
	 * This method is called to run once when this command runs.
	 */
	virtual void Initialize();

	/*
	 * This is the method that will actually take in inputs and move the arm (via PID or otherwise).
	 * Until the method is killed, this will be called at around 15Hz.
	 */
	virtual void Execute();

	/*
	 * This method determines if the arm command has actually completed. In Teleop, we should never complete
	 * this command, however in Autonomous, we would like to end early and move on with the script.
	 */
	virtual bool IsFinished();

	/*
	 * This is the method called once when it is declared "finished". We do nothing here.
	 */
	virtual void End();

	/*
	 * This method gets called when another instance of the command is called and we need to let it go.
	 * We shouldn't do anything special here...
	 */
	virtual void Interrupted();

private:
	/*
	 * This variable is the initial position that we injected into the system. Only used in autonomous.
	 */
	double position;

	/*
	 * This boolean value is set in the constructor and discerns if we are running autonomously.
	 */
	bool isAutonomous;
};

#endif
