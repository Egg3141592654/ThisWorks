// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

std::shared_ptr<SpeedController> RobotMap::driveDriveMotorL1;
std::shared_ptr<SpeedController> RobotMap::driveDriveMotorL2;
std::shared_ptr<SpeedController> RobotMap::driveDriveMotorR1;
std::shared_ptr<SpeedController> RobotMap::driveDriveMotorR2;
std::shared_ptr<SpeedController> RobotMap::driveDriveMotorL3;
std::shared_ptr<SpeedController> RobotMap::driveDriveMotorR3;
std::shared_ptr<RobotDrive> RobotMap::driveRobotDrive41;
std::shared_ptr<DoubleSolenoid> RobotMap::catapultBidirectional;
std::shared_ptr<DoubleSolenoid> RobotMap::catapultsingledirection;
std::shared_ptr<Compressor> RobotMap::compressor;
std::shared_ptr<Encoder> RobotMap::encoder;

void RobotMap::init() {
    LiveWindow *lw = LiveWindow::GetInstance();

    driveDriveMotorL1.reset(new VictorSP(MOTOR_L1_PORT));
    lw->AddActuator("Drive", "DriveMotorL1", std::static_pointer_cast<VictorSP>(driveDriveMotorL1));
    
    driveDriveMotorL2.reset(new VictorSP(MOTOR_L2_PORT));
    lw->AddActuator("Drive", "DriveMotorL2", std::static_pointer_cast<VictorSP>(driveDriveMotorL2));
    
    driveDriveMotorR1.reset(new VictorSP(MOTOR_R1_PORT));
    lw->AddActuator("Drive", "DriveMotorR1", std::static_pointer_cast<VictorSP>(driveDriveMotorR1));
    
    driveDriveMotorR2.reset(new VictorSP(MOTOR_R2_PORT));
    lw->AddActuator("Drive", "DriveMotorR2", std::static_pointer_cast<VictorSP>(driveDriveMotorR2));

    driveDriveMotorR3.reset(new VictorSP(MOTOR_ARM1_PORT));
    lw->AddActuator("Drive", "DriveMotorR3", std::static_pointer_cast<VictorSP>(driveDriveMotorR3));

    driveDriveMotorL3.reset(new VictorSP(MOTOR_ARM2_PORT));
    lw->AddActuator("Drive", "DriveMotorL3", std::static_pointer_cast<VictorSP>(driveDriveMotorL3));

    catapultBidirectional.reset(new DoubleSolenoid(0, CATAPULT_BIDIR_PORT_FORWARD, CATAPULT_BIDIR_PORT_REVERSE));
    
    catapultsingledirection.reset(new DoubleSolenoid(0, FINGER_PORT_FORWARD, FINGER_PORT_REVERSE));
    
    compressor.reset(new Compressor(0));

    encoder.reset(new Encoder(ARM_ENCODER_A_PORT, ARM_ENCODER_B_PORT, false, Encoder::k4X));
    lw->AddSensor("Arm", "encoder", encoder);
    encoder->SetDistancePerPulse(0.1875);
    encoder->SetPIDSourceType(PIDSourceType::kDisplacement);
    encoder->SetReverseDirection(true);
    }
