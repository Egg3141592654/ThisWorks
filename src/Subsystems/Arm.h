// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ARM_H
#define ARM_H
#include "Commands/PIDSubsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Arm: public PIDSubsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> aRM_MOTOR_1;
	std::shared_ptr<SpeedController> aRM_MOTOR_2;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<Encoder> encoder;

	// The position of the robot at this point in time
	double currentPosition;

	double rollingAverage[10] = {90., 90., 90., 90., 90., 90., 90., 90., 90., 90.};
	int rollingIndex = 0;
	double setPoint;
	bool isEnabled;
public:
	Arm();
	void InitDefaultCommand();
	double ReturnPIDInput();
	void UsePIDOutput(double output);
	void Drive(float);
	void SetNewPosition(double newTarget, bool isRelative=false);
	void SetNewRelativePosition(Joystick * stick);
	double GetTarget();

	// Override Commands
	void EnablePID(bool);
	bool AtPosition(void);
	double GetRollingAverage(void);

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
