// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drive> Robot::drive;
std::shared_ptr<WheelieBar> Robot::wheelieBar;
std::shared_ptr<Finger> Robot::finger;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<Arm> Robot::arm;
std::shared_ptr<Collector> Robot::collector;
std::unique_ptr<OI> Robot::oi;
std::shared_ptr<DigitalInput> Robot::lowBarPin;
std::shared_ptr<DigitalInput> Robot::moatPin;
std::shared_ptr<DigitalInput> Robot::portcullisPin;
std::shared_ptr<DigitalInput> Robot::roughTerrainPin;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drive.reset(new Drive());
    wheelieBar.reset(new WheelieBar());
    finger.reset(new Finger());
    elevator.reset(new Elevator());
    pneumatics.reset(new Pneumatics());
    arm.reset(new Arm());
    collector.reset(new Collector());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());
	autoCommand = new DefenseCreep();

	// Initialize the autonomous inputs
	lowBarPin.reset(new DigitalInput(1));
	moatPin.reset(new DigitalInput(2));
	portcullisPin.reset(new DigitalInput(3));
	roughTerrainPin.reset(new DigitalInput(4));

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	printf("State of autonomous pins:\n");
	printf("LowBarState: %d\n", lowBarPin->Get());
	printf("MoatState: %d\n", moatPin->Get());
	printf("PortcullisState: %d\n", portcullisPin->Get());
	printf("RoughTerrainPin: %d\n", roughTerrainPin->Get());

	if (autoCommand != nullptr)
	{
		delete autoCommand;
	}

	// Pins pull high, invert logic
	if (!lowBarPin->Get())
	{
		printf("Selected Low Bar\n");
		autoCommand = new LowBar();
	}
	else if(!moatPin->Get())
	{
		printf("Selected Moat\n");
		autoCommand = new Moat();
	}
	else if(!portcullisPin->Get())
	{
		printf("Selected Portcullis\n");
		autoCommand = new Portcullis();
	}
	else if(!roughTerrainPin->Get())
	{
		printf("Selected RoughTerrain\n");
		autoCommand = new RoughTerrian();
	}
	else
	{
		printf("Selected DefenseCreep\n");
		autoCommand = new DefenseCreep();
	}

	printf("Hi guys, I hope you have a good match out there - SubZero");
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	printf("Autonomous initialized.\n");
	//autoCommand = (Command *) chooser->GetSelected();
	autoCommand->Start();
}

void Robot::AutonomousPeriodic() {
	// printf("Auto Running.\n");
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	autoCommand->Cancel();
	Scheduler::GetInstance()->RemoveAll();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("Target Arm Position", arm->GetTarget());
	SmartDashboard::PutNumber("Current Arm Position", arm->ReturnPIDInput());
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

